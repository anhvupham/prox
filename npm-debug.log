0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.0.0
3 info using node@v0.11.14
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add spec="." args=[".",null]
7 verbose parsed spec { raw: '.',
7 verbose parsed spec   scope: null,
7 verbose parsed spec   name: null,
7 verbose parsed spec   rawSpec: '.',
7 verbose parsed spec   spec: '/private/var/www/proxess',
7 verbose parsed spec   type: 'local' }
8 verbose cache add local package /private/var/www/proxess
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/charlie/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/charlie/.npm/proxess/0.1.0/package.tgz', '.' ]
12 verbose tarball /Users/charlie/.npm/proxess/0.1.0/package.tgz
13 verbose folder .
14 info prepublish proxess@0.1.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/charlie/.npm/1f1177db-tar.lock
17 silly lockFile a2267dcf-ie-npm-proxess-0-1-0-package-tgz tar:///Users/charlie/.npm/proxess/0.1.0/package.tgz
18 verbose lock tar:///Users/charlie/.npm/proxess/0.1.0/package.tgz /Users/charlie/.npm/a2267dcf-ie-npm-proxess-0-1-0-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile a2267dcf-ie-npm-proxess-0-1-0-package-tgz tar:///Users/charlie/.npm/proxess/0.1.0/package.tgz
22 silly lockFile a2267dcf-ie-npm-proxess-0-1-0-package-tgz tar:///Users/charlie/.npm/proxess/0.1.0/package.tgz
23 silly lockFile d99267a5-harlie-npm-proxess-0-1-0-package /Users/charlie/.npm/proxess/0.1.0/package
24 verbose lock /Users/charlie/.npm/proxess/0.1.0/package /Users/charlie/.npm/d99267a5-harlie-npm-proxess-0-1-0-package.lock
25 silly lockFile d99267a5-harlie-npm-proxess-0-1-0-package /Users/charlie/.npm/proxess/0.1.0/package
26 silly lockFile d99267a5-harlie-npm-proxess-0-1-0-package /Users/charlie/.npm/proxess/0.1.0/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'proxess',
29 silly publish   version: '0.1.0',
29 silly publish   description: 'Manages Processes running on your computer',
29 silly publish   author: { name: 'Charlie Mitchell', email: 'charliesemailis@gmail.com' },
29 silly publish   main: './app.js',
29 silly publish   bin: { proxess: './bin/proxess.js' },
29 silly publish   license: 'MIT',
29 silly publish   keywords:
29 silly publish    [ 'micro service management',
29 silly publish      'microservice',
29 silly publish      'service',
29 silly publish      'management',
29 silly publish      'api management',
29 silly publish      'process',
29 silly publish      'process management' ],
29 silly publish   bugs:
29 silly publish    { url: 'http://github.com/charliemitchell/proxess',
29 silly publish      email: 'charliesemailis@gmail.com' },
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'http://github.com/charliemitchell/proxess.git' },
29 silly publish   dependencies: { nimbleservice: 'latest' },
29 silly publish   readme: '\n# PROXESS\n##### A process manager for your service pool. The idea is, it should be easy to manage all of the servers running on your local machine. Proxess aims to improve the developer experience by allowing you to store all of your terminal commands in a database and start / stop & monitor proccesses\n\n## Prerequisites\n* [Node.js](http://nodejs.org/) (with NPM)\n* [MONGO DB](http://www.mongodb.org/)\n\n## Installation\n\n`(sudo) npm install -g proxess`\n\n## Running Proxess\nTo manage your running services, just run the proxess command in your terminal. (from any working directory)\n```sh\n$ proxess\n```\nThen visit your manager at [http://localhost:9011/](http://localhost:9011/).\n\n## THE API\n```\nGET /process          "Returns A List Of All Processes In The Database"\nPOST /process         "Creates A New Processes In The Database"\n    \nGET /process/:id      "Returns A Process Model by it\'s id"\nPUT /process/:id      "Updates A Process Model by it\'s id"\nDELETE /process/:id   "Removes A Process Model by it\'s id"\n\nGET /stats            "Returns Memory Pressure and CPU Usage For Each Process"\nGET /stats/:id        "Returns Memory Pressure and CPU Usage For A Single Process"\n\nGET /alive            "Returns An array of currently running processes managed by this application"\n\nPOST /execute/:id     "Starts A Process By It\'s ID"\nDELETE /execute/:id   "Kills A Process By It\'s ID"\n\nPOST /all             "Starts Every Dead Process In Your Process Database"\nDELETE /all           "Stops Every Running Process In Your Process Database"\n```\n\n## Additions to the API Coming Soon!\n```\n    // Grouping Processes (To start and stop the group you will still use the /execute/:id route.. We will manage the rest internally.)\n\n    POST /group        "Defines a process group to run together (a named set of processes)"\n    GET /group         "Returns A List Of All Process Groups In The Database"\n    \n    GET /group/:id     "Returns A Process Group By It\'s ID"\n    PUT /group/:id     "Updates A Process Group By It\'s ID"\n    DELETE /group/:id  "Deletes A Process Group By It\'s ID"\n```\n\n## Data Structures\n```json\n    // When Creating a process, POST JSON like so... (Same With Updating, But You Should Include The id as well)\n    {\n        "name" : "My Cool Service",\n        "command" : "node",\n        "args" : ["app.js"],\n        "cwd" : "/full/path/to/your/service/"\n    }\n    // ----> Results will be similar to running  \'cd /full/path/to/your/service/ && node app.js\' in your console.\n\n    // A More Advanced Example\n    {\n        "name" : "My ROOT Service",\n        "command" : "sudo",\n        "args" : ["-p", "mypassword", "dostuff", "--path=", "something"],\n        "cwd" : "/full/path/to/your/service/"\n    }\n    // ----> Results will be similar to running  \'cd /full/path/to/your/service/ && sudo -p mypassword dostuff --path= soemthing\' in your console.\n```\n\n\n#### The Client\nThe Client is built in Ember JS. In Order to use the client you need to do the following steps...\n```sh\n    cd client\n    npm install\n    bower install\n    ember build\n```\nThis was left this way intentionally so that you can have access to The Ember CLI Project in order to make changes to the client as you see fit. For More info about Ember CLI, or Ember in general, see the useful links section below\n\n\n## Useful Links\n* [NimbleService](https://www.npmjs.com/package/nimbleservice) (This is what we built the sever on top of)\n* [Ember.js](http://emberjs.com/) (MVC Client Framework)\n* [Ember CLI](http://www.ember-cli.com/) (CLI for The Ember Framework)\n* [Boot Swatch](http://bootswatch.com/) (A Bootstrap Theming Wrapper)\n\n\n## GITHUB\n* [proxess](http://github.com/charliemitchell/proxess) ',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'e06e7be9f73e06934fa5e7dd1f1d4ea53be57f28',
29 silly publish   _id: 'proxess@0.1.0',
29 silly publish   scripts: {},
29 silly publish   _shasum: 'c37c7fe76336cf7f83c415882b144f743f17b98e',
29 silly publish   _from: '.' }
30 verbose mapToRegistry name proxess
31 verbose mapToRegistry uri https://registry.npmjs.org/proxess
32 verbose publish registryBase https://registry.npmjs.org/
33 verbose request on initialization, where is /proxess
34 verbose request after pass 1, where is /proxess
35 verbose request url raw /proxess
36 verbose request resolving registry [ 'https://registry.npmjs.org/', './proxess' ]
37 verbose request after pass 2, where is https://registry.npmjs.org/proxess
38 verbose request sending authorization for write operation
39 info attempt registry request try #1 at 18:18:20
40 verbose request id 9cc9dbd79f105eb9
41 http request PUT https://registry.npmjs.org/proxess
42 http 403 https://registry.npmjs.org/proxess
43 verbose headers { date: 'Sat, 28 Feb 2015 02:18:15 GMT',
43 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
43 verbose headers   'content-type': 'application/json',
43 verbose headers   'cache-control': 'max-age=60',
43 verbose headers   'content-length': '6928',
43 verbose headers   'accept-ranges': 'bytes',
43 verbose headers   via: '1.1 varnish',
43 verbose headers   'x-served-by': 'cache-sjc3132-SJC',
43 verbose headers   'x-cache': 'MISS',
43 verbose headers   'x-cache-hits': '0',
43 verbose headers   'x-timer': 'S1425089895.007284,VS0,VE60',
43 verbose headers   connection: 'close' }
44 error publish Failed PUT 403
45 verbose stack Error: forbidden cannot modify pre-existing version: 0.1.0
45 verbose stack old={"name":"proxess","version":"0.1.0","description":"Manages Processes running on your computer","author":{"name":"Charlie Mitchell","email":"charliesemailis@gmail.com"},"main":"./app.js","bin":{"proxess":"./bin/proxess.js"},"license":"MIT","keywords":["micro service management","microservice","service","management","api management","process","process management"],"bugs":{"url":"http://github.com/charliemitchell/proxess","email":"charliesemailis@gmail.com"},"repository":{"type":"git","url":"http://github.com/charliemitchell/proxess.git"},"dependencies":{"nimbleservice":"latest"},"gitHead":"1520ecdf0f0f6df1d33a59af1f3f27cc5443cf3f","_id":"proxess@0.1.0","scripts":{},"_shasum":"d1ab3b4d934e2fd322f35aa00fb07104bcccf050","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"charliemitchell","email":"charliesemailis@gmail.com"},"maintainers":[{"name":"charliemitchell","email":"charliesemailis@gmail.com"}],"dist":{"shasum":"d1ab3b4d934e2fd322f35aa00fb07104bcccf050","tarball":"http://registry.npmjs.org/proxess/-/proxess-0.1.0.tgz"}}
45 verbose stack new={"name":"proxess","version":"0.1.0","description":"Manages Processes running on your computer","author":{"name":"Charlie Mitchell","email":"charliesemailis@gmail.com"},"main":"./app.js","bin":{"proxess":"./bin/proxess.js"},"license":"MIT","keywords":["micro service management","microservice","service","management","api management","process","process management"],"bugs":{"url":"http://github.com/charliemitchell/proxess","email":"charliesemailis@gmail.com"},"repository":{"type":"git","url":"http://github.com/charliemitchell/proxess.git"},"dependencies":{"nimbleservice":"latest"},"readme":"\u000a# PROXESS\u000a##### A process manager for your service pool. The idea is, it should be easy to manage all of the servers running on your local machine. Proxess aims to improve the developer experience by allowing you to store all of your terminal commands in a database and start / stop & monitor proccesses\u000a\u000a## Prerequisites\u000a* [Node.js](http://nodejs.org/) (with NPM)\u000a* [MONGO DB](http://www.mongodb.org/)\u000a\u000a## Installation\u000a\u000a`(sudo) npm install -g proxess`\u000a\u000a## Running Proxess\u000aTo manage your running services, just run the proxess command in your terminal. (from any working directory)\u000a```sh\u000a$ proxess\u000a```\u000aThen visit your manager at [http://localhost:9011/](http://localhost:9011/).\u000a\u000a## THE API\u000a```\u000aGET /process          \"Returns A List Of All Processes In The Database\"\u000aPOST /process         \"Creates A New Processes In The Database\"\u000a    \u000aGET /process/:id      \"Returns A Process Model by it's id\"\u000aPUT /process/:id      \"Updates A Process Model by it's id\"\u000aDELETE /process/:id   \"Removes A Process Model by it's id\"\u000a\u000aGET /stats            \"Returns Memory Pressure and CPU Usage For Each Process\"\u000aGET /stats/:id        \"Returns Memory Pressure and CPU Usage For A Single Process\"\u000a\u000aGET /alive            \"Returns An array of currently running processes managed by this application\"\u000a\u000aPOST /execute/:id     \"Starts A Process By It's ID\"\u000aDELETE /execute/:id   \"Kills A Process By It's ID\"\u000a\u000aPOST /all             \"Starts Every Dead Process In Your Process Database\"\u000aDELETE /all           \"Stops Every Running Process In Your Process Database\"\u000a```\u000a\u000a## Additions to the API Coming Soon!\u000a```\u000a    // Grouping Processes (To start and stop the group you will still use the /execute/:id route.. We will manage the rest internally.)\u000a\u000a    POST /group        \"Defines a process group to run together (a named set of processes)\"\u000a    GET /group         \"Returns A List Of All Process Groups In The Database\"\u000a    \u000a    GET /group/:id     \"Returns A Process Group By It's ID\"\u000a    PUT /group/:id     \"Updates A Process Group By It's ID\"\u000a    DELETE /group/:id  \"Deletes A Process Group By It's ID\"\u000a```\u000a\u000a## Data Structures\u000a```json\u000a    // When Creating a process, POST JSON like so... (Same With Updating, But You Should Include The id as well)\u000a    {\u000a        \"name\" : \"My Cool Service\",\u000a        \"command\" : \"node\",\u000a        \"args\" : [\"app.js\"],\u000a        \"cwd\" : \"/full/path/to/your/service/\"\u000a    }\u000a    // ----> Results will be similar to running  'cd /full/path/to/your/service/ && node app.js' in your console.\u000a\u000a    // A More Advanced Example\u000a    {\u000a        \"name\" : \"My ROOT Service\",\u000a        \"command\" : \"sudo\",\u000a        \"args\" : [\"-p\", \"mypassword\", \"dostuff\", \"--path=\", \"something\"],\u000a        \"cwd\" : \"/full/path/to/your/service/\"\u000a    }\u000a    // ----> Results will be similar to running  'cd /full/path/to/your/service/ && sudo -p mypassword dostuff --path= soemthing' in your console.\u000a```\u000a\u000a\u000a#### The Client\u000aThe Client is built in Ember JS. In Order to use the client you need to do the following steps...\u000a```sh\u000a    cd client\u000a    npm install\u000a    bower install\u000a    ember build\u000a```\u000aThis was left this way intentionally so that you can have access to The Ember CLI Project in order to make changes to the client as you see fit. For More info about Ember CLI, or Ember in general, see the useful links section below\u000a\u000a\u000a## Useful Links\u000a* [NimbleService](https://www.npmjs.com/package/nimbleservice) (This is what we built the sever on top of)\u000a* [Ember.js](http://emberjs.com/) (MVC Client Framework)\u000a* [Ember CLI](http://www.ember-cli.com/) (CLI for The Ember Framework)\u000a* [Boot Swatch](http://bootswatch.com/) (A Bootstrap Theming Wrapper)\u000a\u000a\u000a## GITHUB\u000a* [proxess](http://github.com/charliemitchell/proxess) ","readmeFilename":"README.md","gitHead":"e06e7be9f73e06934fa5e7dd1f1d4ea53be57f28","_id":"proxess@0.1.0","scripts":{},"_shasum":"c37c7fe76336cf7f83c415882b144f743f17b98e","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"charliemitchell","email":"charliesemailis@gmail.com"},"maintainers":[{"name":"charliemitchell","email":"charliesemailis@gmail.com"}],"dist":{"shasum":"c37c7fe76336cf7f83c415882b144f743f17b98e","tarball":"http://registry.npmjs.org/proxess/-/proxess-0.1.0.tgz"}}: proxess
45 verbose stack     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:261:14)
45 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:198:65)
45 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
45 verbose stack     at Request.emit (events.js:110:17)
45 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
45 verbose stack     at Request.emit (events.js:129:20)
45 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
45 verbose stack     at IncomingMessage.emit (events.js:129:20)
45 verbose stack     at _stream_readable.js:907:16
45 verbose stack     at process._tickCallback (node.js:372:11)
46 verbose statusCode 403
47 verbose pkgid proxess
48 verbose cwd /private/var/www/proxess
49 error Darwin 14.1.0
50 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
51 error node v0.11.14
52 error npm  v2.0.0
53 error code E403
54 error forbidden cannot modify pre-existing version: 0.1.0
54 error old={"name":"proxess","version":"0.1.0","description":"Manages Processes running on your computer","author":{"name":"Charlie Mitchell","email":"charliesemailis@gmail.com"},"main":"./app.js","bin":{"proxess":"./bin/proxess.js"},"license":"MIT","keywords":["micro service management","microservice","service","management","api management","process","process management"],"bugs":{"url":"http://github.com/charliemitchell/proxess","email":"charliesemailis@gmail.com"},"repository":{"type":"git","url":"http://github.com/charliemitchell/proxess.git"},"dependencies":{"nimbleservice":"latest"},"gitHead":"1520ecdf0f0f6df1d33a59af1f3f27cc5443cf3f","_id":"proxess@0.1.0","scripts":{},"_shasum":"d1ab3b4d934e2fd322f35aa00fb07104bcccf050","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"charliemitchell","email":"charliesemailis@gmail.com"},"maintainers":[{"name":"charliemitchell","email":"charliesemailis@gmail.com"}],"dist":{"shasum":"d1ab3b4d934e2fd322f35aa00fb07104bcccf050","tarball":"http://registry.npmjs.org/proxess/-/proxess-0.1.0.tgz"}}
54 error new={"name":"proxess","version":"0.1.0","description":"Manages Processes running on your computer","author":{"name":"Charlie Mitchell","email":"charliesemailis@gmail.com"},"main":"./app.js","bin":{"proxess":"./bin/proxess.js"},"license":"MIT","keywords":["micro service management","microservice","service","management","api management","process","process management"],"bugs":{"url":"http://github.com/charliemitchell/proxess","email":"charliesemailis@gmail.com"},"repository":{"type":"git","url":"http://github.com/charliemitchell/proxess.git"},"dependencies":{"nimbleservice":"latest"},"readme":"\u000a# PROXESS\u000a##### A process manager for your service pool. The idea is, it should be easy to manage all of the servers running on your local machine. Proxess aims to improve the developer experience by allowing you to store all of your terminal commands in a database and start / stop & monitor proccesses\u000a\u000a## Prerequisites\u000a* [Node.js](http://nodejs.org/) (with NPM)\u000a* [MONGO DB](http://www.mongodb.org/)\u000a\u000a## Installation\u000a\u000a`(sudo) npm install -g proxess`\u000a\u000a## Running Proxess\u000aTo manage your running services, just run the proxess command in your terminal. (from any working directory)\u000a```sh\u000a$ proxess\u000a```\u000aThen visit your manager at [http://localhost:9011/](http://localhost:9011/).\u000a\u000a## THE API\u000a```\u000aGET /process          \"Returns A List Of All Processes In The Database\"\u000aPOST /process         \"Creates A New Processes In The Database\"\u000a    \u000aGET /process/:id      \"Returns A Process Model by it's id\"\u000aPUT /process/:id      \"Updates A Process Model by it's id\"\u000aDELETE /process/:id   \"Removes A Process Model by it's id\"\u000a\u000aGET /stats            \"Returns Memory Pressure and CPU Usage For Each Process\"\u000aGET /stats/:id        \"Returns Memory Pressure and CPU Usage For A Single Process\"\u000a\u000aGET /alive            \"Returns An array of currently running processes managed by this application\"\u000a\u000aPOST /execute/:id     \"Starts A Process By It's ID\"\u000aDELETE /execute/:id   \"Kills A Process By It's ID\"\u000a\u000aPOST /all             \"Starts Every Dead Process In Your Process Database\"\u000aDELETE /all           \"Stops Every Running Process In Your Process Database\"\u000a```\u000a\u000a## Additions to the API Coming Soon!\u000a```\u000a    // Grouping Processes (To start and stop the group you will still use the /execute/:id route.. We will manage the rest internally.)\u000a\u000a    POST /group        \"Defines a process group to run together (a named set of processes)\"\u000a    GET /group         \"Returns A List Of All Process Groups In The Database\"\u000a    \u000a    GET /group/:id     \"Returns A Process Group By It's ID\"\u000a    PUT /group/:id     \"Updates A Process Group By It's ID\"\u000a    DELETE /group/:id  \"Deletes A Process Group By It's ID\"\u000a```\u000a\u000a## Data Structures\u000a```json\u000a    // When Creating a process, POST JSON like so... (Same With Updating, But You Should Include The id as well)\u000a    {\u000a        \"name\" : \"My Cool Service\",\u000a        \"command\" : \"node\",\u000a        \"args\" : [\"app.js\"],\u000a        \"cwd\" : \"/full/path/to/your/service/\"\u000a    }\u000a    // ----> Results will be similar to running  'cd /full/path/to/your/service/ && node app.js' in your console.\u000a\u000a    // A More Advanced Example\u000a    {\u000a        \"name\" : \"My ROOT Service\",\u000a        \"command\" : \"sudo\",\u000a        \"args\" : [\"-p\", \"mypassword\", \"dostuff\", \"--path=\", \"something\"],\u000a        \"cwd\" : \"/full/path/to/your/service/\"\u000a    }\u000a    // ----> Results will be similar to running  'cd /full/path/to/your/service/ && sudo -p mypassword dostuff --path= soemthing' in your console.\u000a```\u000a\u000a\u000a#### The Client\u000aThe Client is built in Ember JS. In Order to use the client you need to do the following steps...\u000a```sh\u000a    cd client\u000a    npm install\u000a    bower install\u000a    ember build\u000a```\u000aThis was left this way intentionally so that you can have access to The Ember CLI Project in order to make changes to the client as you see fit. For More info about Ember CLI, or Ember in general, see the useful links section below\u000a\u000a\u000a## Useful Links\u000a* [NimbleService](https://www.npmjs.com/package/nimbleservice) (This is what we built the sever on top of)\u000a* [Ember.js](http://emberjs.com/) (MVC Client Framework)\u000a* [Ember CLI](http://www.ember-cli.com/) (CLI for The Ember Framework)\u000a* [Boot Swatch](http://bootswatch.com/) (A Bootstrap Theming Wrapper)\u000a\u000a\u000a## GITHUB\u000a* [proxess](http://github.com/charliemitchell/proxess) ","readmeFilename":"README.md","gitHead":"e06e7be9f73e06934fa5e7dd1f1d4ea53be57f28","_id":"proxess@0.1.0","scripts":{},"_shasum":"c37c7fe76336cf7f83c415882b144f743f17b98e","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"charliemitchell","email":"charliesemailis@gmail.com"},"maintainers":[{"name":"charliemitchell","email":"charliesemailis@gmail.com"}],"dist":{"shasum":"c37c7fe76336cf7f83c415882b144f743f17b98e","tarball":"http://registry.npmjs.org/proxess/-/proxess-0.1.0.tgz"}}: proxess
55 error If you need help, you may report this error at:
55 error     <http://github.com/npm/npm/issues>
56 verbose exit [ 1, true ]
